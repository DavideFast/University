#include <linux/bpf.h>
#include <time.h>
#include <bpf/libbpf.h>
#include <stdio.h>
#include "tcp_user.skel.h"
#include "tcp.skel.h" 

int main(){
	printf("---------START---------\n");
	struct bpf_object *obj;
	struct bpf_object *obj2;

//Apertura del file
	obj = bpf_object__open_file("tcp_user.bpf.o",NULL);
	obj2 = bpf_object__open_file("tcp.bpf.o",NULL);
	if(libbpf_get_error(obj))
		return 1;
	if(libbpf_get_error(obj2))
		return 1;
	if(bpf_object__load(obj))
		return 1;
	if(bpf_object__load(obj2))
		return 1;

	int prog_fd;
	int prog_fd2;
	struct bpf_program *prog;
	struct bpf_program *prog2;
	prog = bpf_object__find_program_by_name(obj,"xdp_pass");
	prog2 = bpf_object__find_program_by_name(obj2,"egress_filter");
	prog_fd = bpf_program__fd(prog);
	prog_fd2 = bpf_program__fd(prog2);
	if(bpf_program__attach_xdp(prog,2)){
		printf("OPS\n");
	}
	printf("Hello %d\n",bpf_object__btf_fd(obj2));
	struct bpf_tc_opts opts = {
	     .flags = BPF_TC_F_REPLACE,
	     .sz = sizeof(struct bpf_tc_opts),
	     .prog_fd = prog_fd2,
	     .handle = 0,
	     .priority = 1
	};
	struct bpf_tc_hook hook = {
		.sz = sizeof(struct bpf_tc_hook),
		.ifindex = 2,
		.parent = 0,
		.attach_point = BPF_TC_EGRESS,
	
	};
	
	printf("HOOK: %d\n",bpf_tc_hook_create(&hook));

	char buf[20] = "";
	int size = 20;

	libbpf_strerror(bpf_tc_hook_create(&hook),buf,size);
	printf("Errore: %s\n",buf);
	printf("TC attach... %d\n",bpf_tc_attach(&hook,&opts));

//Loading e autoattaching dei file
	struct bpf_map_info info = {};
	unsigned int len = sizeof(info);
	int findme = bpf_obj_get("/sys/fs/bpf/latency_egress_map");
	if(findme<=0){printf("No FD\n");}
	else {
		bpf_obj_get_info_by_fd(findme,&info,&len);
		printf("Name: %s\n",info.name);
	}

//Tempo di attesa
	int count=0;
	time_t start = time(NULL);
	printf("Inserire numero di secondi di cattura\n");
	scanf("%d",&count);
	start = time(NULL);
	while(time(NULL)-start<count){
		
	}

//Distruzione del programma eBPF
	bpf_tc_detach(&hook,&opts);
	printf("Qdisc eliminato con successo...%d\n",bpf_tc_hook_destroy(&hook));
	printf("---------FINISH---------\n");
	return 0;
}
